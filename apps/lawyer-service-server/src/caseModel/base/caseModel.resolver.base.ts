/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CaseModel } from "./CaseModel";
import { CaseModelCountArgs } from "./CaseModelCountArgs";
import { CaseModelFindManyArgs } from "./CaseModelFindManyArgs";
import { CaseModelFindUniqueArgs } from "./CaseModelFindUniqueArgs";
import { CreateCaseModelArgs } from "./CreateCaseModelArgs";
import { UpdateCaseModelArgs } from "./UpdateCaseModelArgs";
import { DeleteCaseModelArgs } from "./DeleteCaseModelArgs";
import { Client } from "../../client/base/Client";
import { Lawyer } from "../../lawyer/base/Lawyer";
import { CaseModelService } from "../caseModel.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CaseModel)
export class CaseModelResolverBase {
  constructor(
    protected readonly service: CaseModelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CaseModel",
    action: "read",
    possession: "any",
  })
  async _caseModelsMeta(
    @graphql.Args() args: CaseModelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CaseModel])
  @nestAccessControl.UseRoles({
    resource: "CaseModel",
    action: "read",
    possession: "any",
  })
  async caseModels(
    @graphql.Args() args: CaseModelFindManyArgs
  ): Promise<CaseModel[]> {
    return this.service.caseModels(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CaseModel, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CaseModel",
    action: "read",
    possession: "own",
  })
  async caseModel(
    @graphql.Args() args: CaseModelFindUniqueArgs
  ): Promise<CaseModel | null> {
    const result = await this.service.caseModel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CaseModel)
  @nestAccessControl.UseRoles({
    resource: "CaseModel",
    action: "create",
    possession: "any",
  })
  async createCaseModel(
    @graphql.Args() args: CreateCaseModelArgs
  ): Promise<CaseModel> {
    return await this.service.createCaseModel({
      ...args,
      data: {
        ...args.data,

        client: args.data.client
          ? {
              connect: args.data.client,
            }
          : undefined,

        lawyer: args.data.lawyer
          ? {
              connect: args.data.lawyer,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CaseModel)
  @nestAccessControl.UseRoles({
    resource: "CaseModel",
    action: "update",
    possession: "any",
  })
  async updateCaseModel(
    @graphql.Args() args: UpdateCaseModelArgs
  ): Promise<CaseModel | null> {
    try {
      return await this.service.updateCaseModel({
        ...args,
        data: {
          ...args.data,

          client: args.data.client
            ? {
                connect: args.data.client,
              }
            : undefined,

          lawyer: args.data.lawyer
            ? {
                connect: args.data.lawyer,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CaseModel)
  @nestAccessControl.UseRoles({
    resource: "CaseModel",
    action: "delete",
    possession: "any",
  })
  async deleteCaseModel(
    @graphql.Args() args: DeleteCaseModelArgs
  ): Promise<CaseModel | null> {
    try {
      return await this.service.deleteCaseModel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Client, {
    nullable: true,
    name: "client",
  })
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "read",
    possession: "any",
  })
  async getClient(@graphql.Parent() parent: CaseModel): Promise<Client | null> {
    const result = await this.service.getClient(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Lawyer, {
    nullable: true,
    name: "lawyer",
  })
  @nestAccessControl.UseRoles({
    resource: "Lawyer",
    action: "read",
    possession: "any",
  })
  async getLawyer(@graphql.Parent() parent: CaseModel): Promise<Lawyer | null> {
    const result = await this.service.getLawyer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
