/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsNumber,
  IsOptional,
  IsString,
  ValidateNested,
  IsDate,
  IsEnum,
} from "class-validator";
import { Client } from "../../client/base/Client";
import { Type } from "class-transformer";
import { Lawyer } from "../../lawyer/base/Lawyer";
import { EnumInvoiceStatus } from "./EnumInvoiceStatus";

@ObjectType()
class Invoice {
  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  amount!: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  caseReference!: string | null;

  @ApiProperty({
    required: false,
    type: () => Client,
  })
  @ValidateNested()
  @Type(() => Client)
  @IsOptional()
  client?: Client | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  gst!: number | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => Lawyer,
  })
  @ValidateNested()
  @Type(() => Lawyer)
  @IsOptional()
  lawyer?: Lawyer | null;

  @ApiProperty({
    required: false,
    enum: EnumInvoiceStatus,
  })
  @IsEnum(EnumInvoiceStatus)
  @IsOptional()
  @Field(() => EnumInvoiceStatus, {
    nullable: true,
  })
  status?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  totalAmount!: number | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Invoice as Invoice };
