/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  RazorpayPayment as PrismaRazorpayPayment,
} from "@prisma/client";

export class RazorpayPaymentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RazorpayPaymentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.razorpayPayment.count(args);
  }

  async razorpayPayments<T extends Prisma.RazorpayPaymentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RazorpayPaymentFindManyArgs>
  ): Promise<PrismaRazorpayPayment[]> {
    return this.prisma.razorpayPayment.findMany<Prisma.RazorpayPaymentFindManyArgs>(
      args
    );
  }
  async razorpayPayment<T extends Prisma.RazorpayPaymentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RazorpayPaymentFindUniqueArgs>
  ): Promise<PrismaRazorpayPayment | null> {
    return this.prisma.razorpayPayment.findUnique(args);
  }
  async createRazorpayPayment<T extends Prisma.RazorpayPaymentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RazorpayPaymentCreateArgs>
  ): Promise<PrismaRazorpayPayment> {
    return this.prisma.razorpayPayment.create<T>(args);
  }
  async updateRazorpayPayment<T extends Prisma.RazorpayPaymentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RazorpayPaymentUpdateArgs>
  ): Promise<PrismaRazorpayPayment> {
    return this.prisma.razorpayPayment.update<T>(args);
  }
  async deleteRazorpayPayment<T extends Prisma.RazorpayPaymentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RazorpayPaymentDeleteArgs>
  ): Promise<PrismaRazorpayPayment> {
    return this.prisma.razorpayPayment.delete(args);
  }
}
