/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { Booking } from "../../booking/base/Booking";
import {
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  IsNumber,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { CaseModel } from "../../caseModel/base/CaseModel";
import { Invoice } from "../../invoice/base/Invoice";
import { Payment } from "../../payment/base/Payment";
import { Rating } from "../../rating/base/Rating";
import { EnumLawyerSpecialties } from "./EnumLawyerSpecialties";
import { User } from "../../user/base/User";

@ObjectType()
class Lawyer {
  @ApiProperty({
    required: false,
    type: () => [Booking],
  })
  @ValidateNested()
  @Type(() => Booking)
  @IsOptional()
  bookings?: Array<Booking>;

  @ApiProperty({
    required: false,
    type: () => [CaseModel],
  })
  @ValidateNested()
  @Type(() => CaseModel)
  @IsOptional()
  cases?: Array<CaseModel>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => [Invoice],
  })
  @ValidateNested()
  @Type(() => Invoice)
  @IsOptional()
  invoices?: Array<Invoice>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  location!: string | null;

  @ApiProperty({
    required: false,
    type: () => [Payment],
  })
  @ValidateNested()
  @Type(() => Payment)
  @IsOptional()
  payments?: Array<Payment>;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  rating!: number | null;

  @ApiProperty({
    required: false,
    type: () => [Rating],
  })
  @ValidateNested()
  @Type(() => Rating)
  @IsOptional()
  ratings?: Array<Rating>;

  @ApiProperty({
    required: false,
    enum: EnumLawyerSpecialties,
    isArray: true,
  })
  @IsEnum(EnumLawyerSpecialties, {
    each: true,
  })
  @IsOptional()
  @Field(() => [EnumLawyerSpecialties], {
    nullable: true,
  })
  specialties?: Array<"Option1">;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  @IsOptional()
  user?: User | null;
}

export { Lawyer as Lawyer };
