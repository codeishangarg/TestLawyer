/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { BookingCreateNestedManyWithoutLawyersInput } from "./BookingCreateNestedManyWithoutLawyersInput";
import {
  ValidateNested,
  IsOptional,
  IsString,
  IsNumber,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { CaseModelCreateNestedManyWithoutLawyersInput } from "./CaseModelCreateNestedManyWithoutLawyersInput";
import { InvoiceCreateNestedManyWithoutLawyersInput } from "./InvoiceCreateNestedManyWithoutLawyersInput";
import { PaymentCreateNestedManyWithoutLawyersInput } from "./PaymentCreateNestedManyWithoutLawyersInput";
import { RatingCreateNestedManyWithoutLawyersInput } from "./RatingCreateNestedManyWithoutLawyersInput";
import { EnumLawyerSpecialties } from "./EnumLawyerSpecialties";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

@InputType()
class LawyerCreateInput {
  @ApiProperty({
    required: false,
    type: () => BookingCreateNestedManyWithoutLawyersInput,
  })
  @ValidateNested()
  @Type(() => BookingCreateNestedManyWithoutLawyersInput)
  @IsOptional()
  @Field(() => BookingCreateNestedManyWithoutLawyersInput, {
    nullable: true,
  })
  bookings?: BookingCreateNestedManyWithoutLawyersInput;

  @ApiProperty({
    required: false,
    type: () => CaseModelCreateNestedManyWithoutLawyersInput,
  })
  @ValidateNested()
  @Type(() => CaseModelCreateNestedManyWithoutLawyersInput)
  @IsOptional()
  @Field(() => CaseModelCreateNestedManyWithoutLawyersInput, {
    nullable: true,
  })
  cases?: CaseModelCreateNestedManyWithoutLawyersInput;

  @ApiProperty({
    required: false,
    type: () => InvoiceCreateNestedManyWithoutLawyersInput,
  })
  @ValidateNested()
  @Type(() => InvoiceCreateNestedManyWithoutLawyersInput)
  @IsOptional()
  @Field(() => InvoiceCreateNestedManyWithoutLawyersInput, {
    nullable: true,
  })
  invoices?: InvoiceCreateNestedManyWithoutLawyersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  location?: string | null;

  @ApiProperty({
    required: false,
    type: () => PaymentCreateNestedManyWithoutLawyersInput,
  })
  @ValidateNested()
  @Type(() => PaymentCreateNestedManyWithoutLawyersInput)
  @IsOptional()
  @Field(() => PaymentCreateNestedManyWithoutLawyersInput, {
    nullable: true,
  })
  payments?: PaymentCreateNestedManyWithoutLawyersInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  rating?: number | null;

  @ApiProperty({
    required: false,
    type: () => RatingCreateNestedManyWithoutLawyersInput,
  })
  @ValidateNested()
  @Type(() => RatingCreateNestedManyWithoutLawyersInput)
  @IsOptional()
  @Field(() => RatingCreateNestedManyWithoutLawyersInput, {
    nullable: true,
  })
  ratings?: RatingCreateNestedManyWithoutLawyersInput;

  @ApiProperty({
    required: false,
    enum: EnumLawyerSpecialties,
    isArray: true,
  })
  @IsEnum(EnumLawyerSpecialties, {
    each: true,
  })
  @IsOptional()
  @Field(() => [EnumLawyerSpecialties], {
    nullable: true,
  })
  specialties?: Array<"Option1">;

  @ApiProperty({
    required: false,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @IsOptional()
  @Field(() => UserWhereUniqueInput, {
    nullable: true,
  })
  user?: UserWhereUniqueInput | null;
}

export { LawyerCreateInput as LawyerCreateInput };
