/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Lawyer } from "./Lawyer";
import { LawyerCountArgs } from "./LawyerCountArgs";
import { LawyerFindManyArgs } from "./LawyerFindManyArgs";
import { LawyerFindUniqueArgs } from "./LawyerFindUniqueArgs";
import { CreateLawyerArgs } from "./CreateLawyerArgs";
import { UpdateLawyerArgs } from "./UpdateLawyerArgs";
import { DeleteLawyerArgs } from "./DeleteLawyerArgs";
import { BookingFindManyArgs } from "../../booking/base/BookingFindManyArgs";
import { Booking } from "../../booking/base/Booking";
import { CaseModelFindManyArgs } from "../../caseModel/base/CaseModelFindManyArgs";
import { CaseModel } from "../../caseModel/base/CaseModel";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { RatingFindManyArgs } from "../../rating/base/RatingFindManyArgs";
import { Rating } from "../../rating/base/Rating";
import { User } from "../../user/base/User";
import { LawyerService } from "../lawyer.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Lawyer)
export class LawyerResolverBase {
  constructor(
    protected readonly service: LawyerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Lawyer",
    action: "read",
    possession: "any",
  })
  async _lawyersMeta(
    @graphql.Args() args: LawyerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Lawyer])
  @nestAccessControl.UseRoles({
    resource: "Lawyer",
    action: "read",
    possession: "any",
  })
  async lawyers(@graphql.Args() args: LawyerFindManyArgs): Promise<Lawyer[]> {
    return this.service.lawyers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Lawyer, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Lawyer",
    action: "read",
    possession: "own",
  })
  async lawyer(
    @graphql.Args() args: LawyerFindUniqueArgs
  ): Promise<Lawyer | null> {
    const result = await this.service.lawyer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Lawyer)
  @nestAccessControl.UseRoles({
    resource: "Lawyer",
    action: "create",
    possession: "any",
  })
  async createLawyer(@graphql.Args() args: CreateLawyerArgs): Promise<Lawyer> {
    return await this.service.createLawyer({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Lawyer)
  @nestAccessControl.UseRoles({
    resource: "Lawyer",
    action: "update",
    possession: "any",
  })
  async updateLawyer(
    @graphql.Args() args: UpdateLawyerArgs
  ): Promise<Lawyer | null> {
    try {
      return await this.service.updateLawyer({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Lawyer)
  @nestAccessControl.UseRoles({
    resource: "Lawyer",
    action: "delete",
    possession: "any",
  })
  async deleteLawyer(
    @graphql.Args() args: DeleteLawyerArgs
  ): Promise<Lawyer | null> {
    try {
      return await this.service.deleteLawyer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Booking], { name: "bookings" })
  @nestAccessControl.UseRoles({
    resource: "Booking",
    action: "read",
    possession: "any",
  })
  async findBookings(
    @graphql.Parent() parent: Lawyer,
    @graphql.Args() args: BookingFindManyArgs
  ): Promise<Booking[]> {
    const results = await this.service.findBookings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [CaseModel], { name: "cases" })
  @nestAccessControl.UseRoles({
    resource: "CaseModel",
    action: "read",
    possession: "any",
  })
  async findCases(
    @graphql.Parent() parent: Lawyer,
    @graphql.Args() args: CaseModelFindManyArgs
  ): Promise<CaseModel[]> {
    const results = await this.service.findCases(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Payment], { name: "payments" })
  @nestAccessControl.UseRoles({
    resource: "Payment",
    action: "read",
    possession: "any",
  })
  async findPayments(
    @graphql.Parent() parent: Lawyer,
    @graphql.Args() args: PaymentFindManyArgs
  ): Promise<Payment[]> {
    const results = await this.service.findPayments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Rating], { name: "ratings" })
  @nestAccessControl.UseRoles({
    resource: "Rating",
    action: "read",
    possession: "any",
  })
  async findRatings(
    @graphql.Parent() parent: Lawyer,
    @graphql.Args() args: RatingFindManyArgs
  ): Promise<Rating[]> {
    const results = await this.service.findRatings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Lawyer): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
